package main

import (
	"context"
	"log"

	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/fiber/v2/middleware/cors"
	"github.com/joho/godotenv"

	"backend/db"
	"backend/handlers"
	"backend/repositories"
	"backend/services"
)

func main() {
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
	if err := db.InitDB(); err != nil {
		log.Fatalf("‚ùå Failed to connect to DB: %v", err)
	}

	//–ü–æ–¥–≥—Ä—É–∂–∞—é –∏–∑ env
	err := godotenv.Load()
	if err != nil {
		log.Println("‚ö†Ô∏è .env not found - using default DB connection")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å–æ–∑–¥–∞–Ω
	if db.Pool == nil {
		log.Fatalf("‚ùå DB pool is nil")
	}

	// –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
	ctx := context.Background()
	conn, err := db.Pool.Acquire(ctx)
	if err != nil {
		log.Fatalf("‚ùå Failed to acquire DB connection: %v", err)
	}
	defer conn.Release()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
	var version string
	err = conn.QueryRow(ctx, "SELECT version()").Scan(&version)
	if err != nil {
		log.Fatalf("‚ùå Failed to query DB: %v", err)
	}
	log.Printf("‚úÖ Database connected: %s", version)

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –∏ —Å–µ—Ä–≤–∏—Å—ã
	userRepo := repositories.NewUserRepository()
	taskRepo := repositories.NewTaskRepository()

	userService := services.NewUserService(userRepo)
	taskService := services.NewTaskService(taskRepo)

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã —Å —Å–µ—Ä–≤–∏—Å–∞–º–∏
	userHandler := handlers.NewUserHandler(userService)
	taskHandler := handlers.NewTaskHandler(taskService)

	app := fiber.New()
	app.Use(cors.New())

	//–ó–∞–ø—É—Å–∫ UI –¥–ª—è openapi
	app.Static("/", "./docs")

	//–ó–∞–ø—Ä–æ—Å—ã –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
	app.Get("/users", userHandler.GetUsers)
	app.Get("/users/:id", userHandler.GetUserByID)
	app.Post("/users", userHandler.PostUsers)
	app.Post("/users/upload", userHandler.UploadUsersXLS)
	app.Delete("/users/:id", userHandler.DeleteUsers)
	app.Patch("/users/:id", userHandler.PatchUsers)

	//–ó–∞–ø—Ä–æ—Å—ã –ø–æ –∑–∞–¥–∞—á–∞–º
	app.Get("/tasks", taskHandler.GetTasks)
	app.Get("/tasks/available", taskHandler.GetAvailableUsers)
	app.Get("/tasks/:id", taskHandler.GetTaskByID)
	app.Post("/tasks", taskHandler.PostTasks)
	app.Delete("/tasks/:id", taskHandler.DeleteTasks)
	app.Patch("/tasks/:id", taskHandler.PatchTasks)
	app.Patch("/tasks/:id/users", taskHandler.PatchTaskUsers)

	// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
	log.Println("üöÄ Server starting on :3000")
	if err := app.Listen("0.0.0.0:3000"); err != nil {
		log.Fatalf("‚ùå Failed to start server: %v", err)
	}
}
